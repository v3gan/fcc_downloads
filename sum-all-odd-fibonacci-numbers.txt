/*
Given a positive integer num, return the sum of all odd Fibonacci numbers that are less than or equal to num.

The first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8.

For example, sumFibs(10) should return 10 because all odd Fibonacci numbers less than or equal to 10 are 1, 1, 3, and 5.
*/

function sumFibs(num) {
  let fib = [1, 1];
  if (num === 1){
    return 1;
  } else {
    let x = 0;   
    let sum = fib[x] + fib[x+1];
    while(sum <= num) {      
      fib.push(sum);
      x++;
      sum = fib[x] + fib[x+1];
    }
    return fib.filter(f => f%2 != 0).reduce((sum, f) => sum + f);
  }
  
}

console.log(sumFibs(1), !Number.isNaN(sumFibs(1)));
console.log(sumFibs(1000), sumFibs(1000) === 1785);
console.log(sumFibs(4000000), sumFibs(4000000) === 4613732);
console.log(sumFibs(4), sumFibs(4) === 5);
console.log(sumFibs(75024), sumFibs(75024) === 60696);
console.log(sumFibs(75025), sumFibs(75025) === 135721);

/*
sumFibs(1) should return a number.

sumFibs(1000) should return 1785.

sumFibs(4000000) should return 4613732.

sumFibs(4) should return 5.

sumFibs(75024) should return 60696.

sumFibs(75025) should return 135721.
*/
